!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports,require("shelljs")):"function"==typeof define&&define.amd?define(["exports","shelljs"],t):t((e="undefined"!=typeof globalThis?globalThis:e||self).index={},e.shelljs)}(this,(function(e,t){"use strict";function r(e){if(e&&e.__esModule)return e;var t=Object.create(null);return e&&Object.keys(e).forEach((function(r){if("default"!==r){var o=Object.getOwnPropertyDescriptor(e,r);Object.defineProperty(t,r,o.get?o:{enumerable:!0,get:function(){return e[r]}})}})),t.default=e,Object.freeze(t)}var o=r(t);const n=(e,t)=>new Promise((r=>{o.exec(t,{cwd:e,silent:!0},((e,t,o)=>r({code:e,stdout:t,stderr:o})))})),s=async e=>n(e,"git remote -v");e.existGitRepo=e=>new Promise((t=>{o.exec("git status",{cwd:e,silent:!0},(e=>t(0===e)))})),e.gitBranchCurrent=async e=>{const{code:t,stdout:r,stderr:o}=await n(e,"git branch --show-current");if(0===t)return r.trim();console.log(o),process.exit(1)},e.gitLocalOriginURI=async e=>{const{code:t,stderr:r,stdout:o}=await s(e);0!==t&&(console.log(r),process.exit(1));return o.split(" ")[0].split("\t")[1]},e.gitRemoveV=s,Object.defineProperty(e,"__esModule",{value:!0})}));//# sourceMappingURL=index.mini.js.map
