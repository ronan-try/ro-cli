"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var t=require("fs"),e=require("path");function r(t){if(t&&t.__esModule)return t;var e=Object.create(null);return t&&Object.keys(t).forEach((function(r){if("default"!==r){var a=Object.getOwnPropertyDescriptor(t,r);Object.defineProperty(e,r,a.get?a:{enumerable:!0,get:function(){return t[r]}})}})),e.default=t,Object.freeze(e)}var a=r(t),i=r(e);const n=t=>{const e=i.resolve(__dirname,"../local/"+t+".cache.json");return a.existsSync(e)||a.writeFileSync(e,JSON.stringify([])),e},c=t=>require(n(t)),s=(t,e)=>new Promise((r=>{a.writeFile(n(t),JSON.stringify(e),(t=>{if(t)throw t;r(!0)}))}));exports.BranchMap=class{static async write(){return await s("branchMap",this.raw),!0}static getRaw(){return this.raw=c("branchMap"),this.raw}static async insertOrUpdate(t,e,r){let a=this.getRaw().find((e=>e.targetGit===t));if(!a)return a={targetGit:t,map:[{localBranch:e,targetBranch:r}]},this.raw.push(a),await this.write();let i=a.map.find((t=>t.localBranch===e));return i?void 0:(i={localBranch:e,targetBranch:r},a.map.push(i),await this.write())}static getTargetBranch(t,e){const r=this.getRaw().find((e=>e.targetGit===t));if(!r)return!1;const a=r.map.find((t=>t.localBranch===e));return!!a&&a.targetBranch}static getTargetBranchByWorkPath(t,e){const r=c("projects").find((e=>e.localPath===t)).targetRepo;return this.getTargetBranch(r,e)}},exports.getRawCacheData=c,exports.getXXFullPath=n,exports.toRewriteCacheData=s;//# sourceMappingURL=index.mini.js.map
