"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var t=require("fs"),r=require("path");function e(t){if(t&&t.__esModule)return t;var r=Object.create(null);return t&&Object.keys(t).forEach((function(e){if("default"!==e){var a=Object.getOwnPropertyDescriptor(t,e);Object.defineProperty(r,e,a.get?a:{enumerable:!0,get:function(){return t[e]}})}})),r.default=t,Object.freeze(r)}var a=e(t),i=e(r);const n=t=>{const r=i.resolve(__dirname,"../local/"+t+".cache.json");return a.existsSync(r)||a.writeFileSync(r,JSON.stringify([])),r},c=t=>require(n(t));exports.BranchMap=class{static async write(){var t,r;return await(t="branchMap",r=this.raw,new Promise((e=>{a.writeFile(n(t),JSON.stringify(r),(t=>{if(t)throw t;e(!0)}))}))),!0}static getRaw(){return this.raw=c("branchMap"),this.raw}static async insertOrUpdate(t,r,e){let a=this.getRaw().find((r=>r.targetGit===t));if(!a)return a={targetGit:t,map:[{localBranch:r,targetBranch:e}]},this.raw.push(a),await this.write();let i=a.map.find((t=>t.localBranch===r));return i?void 0:(i={localBranch:r,targetBranch:e},a.map.push(i),await this.write())}static getTargetBranch(t,r){const e=this.getRaw().find((r=>r.targetGit===t));if(!e)return!1;const a=e.map.find((t=>t.localBranch===r));return!!a&&a.targetBranch}static getTargetBranchByWorkPath(t,r){const e=c("projects").find((r=>r.localPath===t)).targetRepo;return this.getTargetBranch(e,r)}};//# sourceMappingURL=branchMap.mini.js.map
